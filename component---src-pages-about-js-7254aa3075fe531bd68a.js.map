{"version":3,"sources":["webpack:///./src/pages/about.js","webpack:///./src/components/layout.js"],"names":["data","site","siteMetadata","title","query","ListLink","props","style","display","marginRight","to","children","margin","maxWidth","padding","marginBottom","textShadow","backgroundImage","listStyle","float"],"mappings":"6FAAA,kFASe,0BAAGA,EAAH,EAAGA,KAAH,OACb,kBAAC,IAAD,KACE,oCAAUA,EAAKC,KAAKC,aAAaC,OACjC,oDAkBG,IAAMC,EAAK,c,mFCrBZC,EAAW,SAAAC,GAAK,OACpB,wBAAIC,MAAO,CAAEC,QAAQ,eAAiBC,YAAY,SAChD,kBAAC,OAAD,CAAMC,GAAIJ,EAAMI,IAAKJ,EAAMK,YAIhB,gBAAmB,IAAhBA,EAAe,EAAfA,SAEXX,EAAI,OAcV,OACC,yBAAKO,MAAO,CAAEK,OAAO,YAAcC,SAAU,IAAKC,QAAQ,WACxD,4BAAQP,MAAO,CAAEQ,aAAa,WAC5B,kBAAC,OAAD,CAAML,GAAG,IAAIH,MAAO,CAAES,WAAW,OAASC,gBAAgB,SAG/D,wBAAIV,MAAO,CAAEC,QAAQ,WAAcR,EAAKC,KAAKC,aAAaC,QAIrD,wBAAII,MAAO,CAAEW,UAAU,OAASC,MAAM,UACpC,kBAACd,EAAD,CAAUK,GAAG,KAAb,QACA,kBAACL,EAAD,CAAUK,GAAG,WAAb,SACA,kBAACL,EAAD,CAAUK,GAAG,aAAb,WACA,kBAACL,EAAD,CAAUK,GAAG,WAAb,WAIHC,K","file":"component---src-pages-about-js-7254aa3075fe531bd68a.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\nimport { graphql } from \"gatsby\"\n\n  \n// all pages are React components which can pull data using GraphQL query\n// React components: objects which accept input 'props' and return React elements to render some UI\n\n//define a React component in JSX, Gatsby has tools setup to convert to js like React does.\nexport default ({ data })  => (\n  <Layout>\n    <p>About {data.site.siteMetadata.title}</p>\n    <p>some test demo apps</p>\n  </Layout>\n)\n\n// so in JSX:\n//\timport React from \"react\"\n//\texport default () => <div>Hello world!</div>\n// in pure JavaScript:\n//\timport React from \"react\"\n//\texport default () => React.createElement(\"div\", null, \"Hello world!\")\n// 'tags' in JSX can be html or declare React components...\n//\n// The Document Object Model (DOM) is an API for HTML and XML documents.\n// its a structural representation of the document, enabling you to modify its content and visual presentation by using a scripting language such as JavaScript.\n\n\n// this is a page query, it queries the data inside gatsby-config.js > siteMetadata\n// Page queries live outside of the component definition — by convention at the end of a page component file — and are only available on page components.\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n\n//StaticQuery is a new API introduced in Gatsby v2 that allows non-page components (like your layout.js component), \n//to retrieve data via GraphQL queries.\n\n","import React from \"react\"\n//import { Link } from \"gatsby\"\nimport { useStaticQuery, Link, graphql } from \"gatsby\"\n\n//Layout components are for sections of a site that you want to share across multiple pages\n\n// Link is a component that Gatsby generates for each src/page/* page\n// \tit has a 'to' property for the link path, \n//  \tso we can style this by making a ListLink component which creates a Link (via composition)\nconst ListLink = props => (\n  <li style={{ display: `inline-block`, marginRight: `1rem` }}>\n    <Link to={props.to}>{props.children}</Link>\n  </li>\n)\n\nexport default ({ children }) => {\n  \n\tconst data = useStaticQuery(\n\t    graphql`\n\t      query {\n\t\tsite {\n\t\t  siteMetadata {\n\t\t    title\n\t\t  }\n\t\t}\n\t      }\n\t    `\n\t  )\n\n// <h3 style={{ display: `inline` }}>DemoSite</h3>\n\n\treturn (\n  <div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}>\n    <header style={{ marginBottom: `1.5rem` }}>\n      <Link to=\"/\" style={{ textShadow: `none`, backgroundImage: `none` }}>\n\n        \n\t<h3 style={{ display: `inline` }}>{data.site.siteMetadata.title}</h3>\n\t\n\n      </Link>\n      <ul style={{ listStyle: `none`, float: `right` }}>\n        <ListLink to=\"/\">Home</ListLink>\n        <ListLink to=\"/about/\">About</ListLink>\n        <ListLink to=\"/contact/\">Contact</ListLink>\n        <ListLink to=\"/files/\">Files</ListLink>\n      </ul>\n    </header>\n\n    {children}\n  </div>\n\t)\n}"],"sourceRoot":""}