{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/components/playdemo.js","webpack:///./src/components/paypalbutton.js","webpack:///./src/pages/index.js"],"names":["ListLink","props","style","display","marginRight","to","children","data","margin","maxWidth","padding","marginBottom","textShadow","backgroundImage","site","siteMetadata","title","listStyle","float","paths","prefix","name","desc","handleLinkClick","e","target","window","location","pathname","Playdemo","setIdx","triple","n","undefined","getIdx","this","currentIdx","render","idx","index","console","log","length","namestr","descstr","enable","className","onClick","srcstr","src","width","height","oldrender","React","Component","Paypalbutton","backgroundColor","borderWidth","borderColor","textAlign","action","method","type","value","border","alt","query","allMarkdownRemark","totalCount","edges","map","node","key","id","fields","slug","frontmatter","date","excerpt"],"mappings":"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","file":"component---src-pages-index-js-70a6c6e77d23087628fd.js","sourcesContent":["import React from \"react\"\n//import { Link } from \"gatsby\"\nimport { useStaticQuery, Link, graphql } from \"gatsby\"\n\n//Layout components are for sections of a site that you want to share across multiple pages\n\n// Link is a component that Gatsby generates for each src/page/* page\n// \tit has a 'to' property for the link path, \n//  \tso we can style this by making a ListLink component which creates a Link (via composition)\nconst ListLink = props => (\n  <li style={{ display: `inline-block`, marginRight: `1rem` }}>\n    <Link to={props.to}>{props.children}</Link>\n  </li>\n)\n\nexport default ({ children }) => {\n  \n\tconst data = useStaticQuery(\n\t    graphql`\n\t      query {\n\t\tsite {\n\t\t  siteMetadata {\n\t\t    title\n\t\t  }\n\t\t}\n\t      }\n\t    `\n\t  )\n\n// <h3 style={{ display: `inline` }}>DemoSite</h3>\n\n\treturn (\n  <div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}>\n    <header style={{ marginBottom: `1.5rem` }}>\n      <Link to=\"/\" style={{ textShadow: `none`, backgroundImage: `none` }}>\n\n        \n\t<h3 style={{ display: `inline` }}>{data.site.siteMetadata.title}</h3>\n\t\n\n      </Link>\n      <ul style={{ listStyle: `none`, float: `right` }}>\n        <ListLink to=\"/\">Home</ListLink>\n        <ListLink to=\"/about/\">About</ListLink>\n        <ListLink to=\"/contact/\">Contact</ListLink>\n        <ListLink to=\"/files/\">Files</ListLink>\n      </ul>\n    </header>\n\n    {children}\n  </div>\n\t)\n}","import React from \"react\"\nimport { Link } from \"gatsby\"\n//import { graphql } from \"gatsby\"\n//\t\t<Link to={'/playwgl/'} state={{ formfeed: true }} >\n//\t\t<Link to={\"/playwgl/\", {state{ formfeed: true }} >\n\n\n// map name/id to file path?\n//const srcstr = \"/demo/bin/webgl/index.html\"\nconst prefix = \"/demo\"   \n//const prefix = \"\"\n\nconst pagefiles = prefix + \"/files/\"\n\nconst paths = [\nprefix + \"/bin/webgl/index.html\",\nprefix + \"/bin/webgl2018/index.html\"\n];\n\nconst name = [\n\"Capsule Demo\",\n\"Dog Demo\"\n];\n\nconst desc = [\n\"Move that capsule using the arrow keys.\",\n\"Walk around like a dog with the arrow keys.\"\n];\n\nconst handleLinkClick = (e, target) => {\n    \n\t// NODE-SAFE CODE\n\t// Gatsby uses Node to generate our pages. \n\t// Node doesn't know what a window is. \n\t// Be sure to wrap any of your browser interactions\n\t// in some sort of node-safe if statement like this:\n\n\tif (typeof window !== 'undefined') {\n\n\t\t// First, are we on the home page?\n\t\t// If so, let's scroll to the desired block,\n\t\t// which was passed in as an onClick method on our <Link />.\n\t\t// If an event was also passed, we'll preventDefault()\n\n\t\tif (window.location.pathname === pagefiles) {\n\t\t\t//if (e) e.preventDefault()\n\t\t\tPlaydemo.setIdx(target);\n\t\t}\n\t}\n\treturn true;\n}\n\nclass Playdemo extends React.Component {\n\t\n\tstatic currentIdx;\n\t\n\tstatic triple(n) {\n\t\tif (n===undefined) {\n\t\t\tn=1;\n\t\t}\n\t\treturn n*3;\n\t}\n\t\n\tstatic getIdx() {\n\t\tif (this.currentIdx===undefined) {\n\t\t\tthis.currentIdx=-1;\n\t\t}\n\t\treturn this.currentIdx;\n\t}\n\t\n\tstatic setIdx(n) {\n\t\tthis.currentIdx=n;\n\t}\n\n\t\n\n  render() {\n// don't render this component when path index is bad\n    let idx = this.props.index;\n    console.log(idx);\n    if(idx<0||idx>=paths.length){\n\treturn null;\t\n    }\n\t  \n\t  //\t\t<Link to={\"/playwgl/\"}>{this.props}\n\t  \n\tlet namestr = name[idx];\n\tlet descstr = desc[idx];\n\tif(Playdemo.getIdx()===idx){\n\t\tthis.props.enable = true;\n\t}else{\n\t\tthis.props.enable = false;\n\t}\n\t  \n\t// when demo is not enabled, render a link: \n\t// currently handles the click & changes static state above, rather than passing state via Gatsby Link (which is how it should be done, but doesn't work in some Gatsby versions)\n\t  \n    if(!this.props.enable){\n\treturn (\n\t<div className=\"playdemo\">\n\t\t<Link onClick={e => handleLinkClick(e, idx)} to={'/playwgl/'} >\n        <h4>Click to play {namestr} in your browser.</h4>\n\t\t<p>{descstr}</p>\n\t\t</Link>\n\t</div>\t\n\t);\n    }\n\n    let srcstr = paths[idx];\n    console.log(srcstr);\n    return (\n      <div className=\"playdemo\">\n        <h2>Play {namestr}! </h2>\n        <h4>{descstr}</h4>\n\t<iframe src={srcstr} title=\"dummy\" style={{width:'400px',height:'300px'}}></iframe>\n      </div>\n    );\n  }\n\n  oldrender() {\n    return <h4>Play, {this.props.name}</h4>;\n  }\n}\n/*\t\t\n<iframe src=\"/bin/webgl/index.html\" title=\"dummy\" style={{width:'400px',height:'300px'}}></iframe>\n*/\n\nexport default Playdemo","import React from \"react\"\n\n//const srcstr = \"/demo/bin/win64.zip\"\n//const srcstr = \"/bin/win64.zip\"\n\nclass Paypalbutton extends React.Component {\n\n  render() {\n\t  const styleObj = {\n\t\t  backgroundColor : \"#dfd\",\n\t\t  borderWidth: 1,\n\t\t  borderColor: \"#111\",\n\t\t  padding: \"10%\",\n\t\t  textAlign: \"center\"\n\t  }\n    return (\n      <div style = {styleObj} >\n        \n\n<form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\n<input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\"/>\n<input type=\"hidden\" name=\"hosted_button_id\" value=\"Z54R5HGQMJHR2\"/>\n<table>\n<tr><td>\n\t<input type=\"hidden\" name=\"on0\" value=\"how much?\"/>Buy using PayPal</td></tr>\n\t<tr><td><select name=\"os0\">\n\t<option value=\"Option:\">Option1: £10.00 GBP</option>\n\t<option value=\"Option:\">Option2: £20.00 GBP</option>\n\t<option value=\"Option:\">Option3: £50.00 GBP</option>\n</select> </td></tr>\n</table>\n<input type=\"hidden\" name=\"currency_code\" value=\"GBP\"/>\n<input type=\"image\" src=\"https://www.paypalobjects.com/en_US/GB/i/btn/btn_buynowCC_LG.gif\" border=\"0\" name=\"submit\" alt=\"PayPal – The safer, easier way to pay online!\"/>\n<img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/en_GB/i/scr/pixel.gif\" width=\"1\" height=\"1\"/>\n</form>\n\n\t\t\n      </div>\n    );\n  }\n\n}\t\t\n\nexport default Paypalbutton ","/*\n\nimport React from \"react\"\n\nexport default () => <div>Hello world!</div>\n\n\n// Gatsby uses Server-Side Rendering (SSR) to generate your site’s pages, \n// the JSX code you write is usually compiled before the browser loads the page. \n// Because of this, certain features are not available at compile time and can cause a build error.\n// (ie browser globals such as window, document or localStorage)\n\n*/\n\n\nimport React from \"react\"\nimport Layout from \"../components/layout\"\nimport Playdemo from \"../components/playdemo\"\nimport Paypalbutton from \"../components/paypalbutton\"\n//import { graphql } from \"gatsby\"\n//import { Link, graphql, navigate } from \"gatsby\"\nimport { Link, graphql } from \"gatsby\"\n\nconst ListLink = props => (\n  <li style={{ display: `inline-block`, marginRight: `1rem` }}>\n    <Link to={props.to}>{props.children}</Link>\n  </li>\n)\n\nexport default ({ data }) => {\n\n  console.log(data)\n  //<div> //replace with centred column of text\n  //<div style={{ margin: `3rem auto`, maxWidth: 600 }}> //replace with layout so we can reuse on other pages\n\n\tPlaydemo.setIdx(0);\n\t\nreturn (\n  <Layout>\n    <p>What is this? </p>\n    <p>A test website with various place holder demos made using Unity game engine and other random things.\n    </p>\n\n\t<Playdemo name=\"Capsule Demo\" index={0} enable={true}/>\n\t<Paypalbutton />\n\t\n\n\n\t<h4>{data.allMarkdownRemark.totalCount} Posts</h4>\n        {data.allMarkdownRemark.edges.map(({ node }) => (\n          <div key={node.id}>\n\t    <Link\n              to={node.fields.slug}\n            >\n\n            <h3>\n              {node.frontmatter.title}{\" \"}\n              <span>\n                — {node.frontmatter.date}\n              </span>\n            </h3>\n            <p>{node.excerpt}</p>\n\n\t    </Link>\n          </div>\n        ))}\n\n\n\n<ListLink to=\"/about/\">About</ListLink>\n\n  </Layout>\n)\n\n}\n\n/*\t\n\t<form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\n<input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\"/>\n<input type=\"hidden\" name=\"hosted_button_id\" value=\"Z54R5HGQMJHR2\"/>\n<table>\n<tr><td>\n\t<input type=\"hidden\" name=\"on0\" value=\"how much?\"/>Buy using PayPal</td></tr>\n\t<tr><td><select name=\"os0\">\n\t<option value=\"Option:\">Option: £10.00 GBP</option>\n\t<option value=\"Option:\">Option: £20.00 GBP</option>\n\t<option value=\"Option:\">Option: £50.00 GBP</option>\n</select> </td></tr>\n</table>\n<input type=\"hidden\" name=\"currency_code\" value=\"GBP\"/>\n<input type=\"image\" src=\"https://www.paypalobjects.com/en_US/GB/i/btn/btn_buynowCC_LG.gif\" border=\"0\" name=\"submit\" alt=\"PayPal – The safer, easier way to pay online!\"/>\n<img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/en_GB/i/scr/pixel.gif\" width=\"1\" height=\"1\"/>\n</form>\n\n\n\n      <iframe src=\"/bin/webgl/index.html\" title=\"dummy\" style={{width:'400px',height:'300px'}}></iframe>\n\n      <iframe src=\"/bin/webgl/index.html\" title=\"dummy\" style={{width:'800px',height:'600px'}}></iframe>\n\n      <iframe src=\"/demo/bin/webgl/index.html\" title=\"dummy\" style={{width:'400px',height:'300px'}}></iframe>\n\n\nif (typeof window !== `undefined`) {\n    <div>\n      <iframe src={navigate(\"/bin/webgl/index.html\")} title=\"dummy\" style={{width:'400px',height:'300px'}}></iframe>\n    </div>\n}\n\n\n\nconst ListLink = props => (\n  <li style={{ display: `inline-block`, marginRight: `1rem` }}>\n    <Link to={props.to}>{props.children}</Link>\n  </li>\n)\n\n\n<List to=\"/bin/Webgl/index.html\"> <p>webgl</p> </Link>\n<List to=\"/bin/win64.zip\"> <p>win_x64.zip</p> </Link>\n\n \n*/\n\n// To sort posts in descending order, by date replace: \n//\tallMarkdownRemark {\n// with \n// \tallMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }). \n// Note: There are 3 underscores between frontmatter and date. \n\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark (sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n\n\n"],"sourceRoot":""}